// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/inception/proto/host.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QubesomeHost_XdgOpen_FullMethodName     = "/qubesome.QubesomeHost/XdgOpen"
	QubesomeHost_RunWorkload_FullMethodName = "/qubesome.QubesomeHost/RunWorkload"
)

// QubesomeHostClient is the client API for QubesomeHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QubesomeHostClient interface {
	XdgOpen(ctx context.Context, in *XdgOpenRequest, opts ...grpc.CallOption) (*XdgOpenReply, error)
	RunWorkload(ctx context.Context, in *RunWorkloadRequest, opts ...grpc.CallOption) (*RunWorkloadReply, error)
}

type qubesomeHostClient struct {
	cc grpc.ClientConnInterface
}

func NewQubesomeHostClient(cc grpc.ClientConnInterface) QubesomeHostClient {
	return &qubesomeHostClient{cc}
}

func (c *qubesomeHostClient) XdgOpen(ctx context.Context, in *XdgOpenRequest, opts ...grpc.CallOption) (*XdgOpenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XdgOpenReply)
	err := c.cc.Invoke(ctx, QubesomeHost_XdgOpen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubesomeHostClient) RunWorkload(ctx context.Context, in *RunWorkloadRequest, opts ...grpc.CallOption) (*RunWorkloadReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunWorkloadReply)
	err := c.cc.Invoke(ctx, QubesomeHost_RunWorkload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QubesomeHostServer is the server API for QubesomeHost service.
// All implementations must embed UnimplementedQubesomeHostServer
// for forward compatibility.
type QubesomeHostServer interface {
	XdgOpen(context.Context, *XdgOpenRequest) (*XdgOpenReply, error)
	RunWorkload(context.Context, *RunWorkloadRequest) (*RunWorkloadReply, error)
	mustEmbedUnimplementedQubesomeHostServer()
}

// UnimplementedQubesomeHostServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQubesomeHostServer struct{}

func (UnimplementedQubesomeHostServer) XdgOpen(context.Context, *XdgOpenRequest) (*XdgOpenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XdgOpen not implemented")
}
func (UnimplementedQubesomeHostServer) RunWorkload(context.Context, *RunWorkloadRequest) (*RunWorkloadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWorkload not implemented")
}
func (UnimplementedQubesomeHostServer) mustEmbedUnimplementedQubesomeHostServer() {}
func (UnimplementedQubesomeHostServer) testEmbeddedByValue()                      {}

// UnsafeQubesomeHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QubesomeHostServer will
// result in compilation errors.
type UnsafeQubesomeHostServer interface {
	mustEmbedUnimplementedQubesomeHostServer()
}

func RegisterQubesomeHostServer(s grpc.ServiceRegistrar, srv QubesomeHostServer) {
	// If the following call pancis, it indicates UnimplementedQubesomeHostServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QubesomeHost_ServiceDesc, srv)
}

func _QubesomeHost_XdgOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XdgOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubesomeHostServer).XdgOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QubesomeHost_XdgOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubesomeHostServer).XdgOpen(ctx, req.(*XdgOpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubesomeHost_RunWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubesomeHostServer).RunWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QubesomeHost_RunWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubesomeHostServer).RunWorkload(ctx, req.(*RunWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QubesomeHost_ServiceDesc is the grpc.ServiceDesc for QubesomeHost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QubesomeHost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qubesome.QubesomeHost",
	HandlerType: (*QubesomeHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "XdgOpen",
			Handler:    _QubesomeHost_XdgOpen_Handler,
		},
		{
			MethodName: "RunWorkload",
			Handler:    _QubesomeHost_RunWorkload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/inception/proto/host.proto",
}
